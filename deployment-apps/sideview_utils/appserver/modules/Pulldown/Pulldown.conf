# Copyright (C) 2010-2011 Sideview LLC.  All Rights Reserved.

[module]
className = Splunk.Module.Pulldown

superClass = Splunk.Module.DispatchingModule

description = This is designed to be a select pulldown that can either pull its values from a search or from a statically defined list.   Note that unlike Splunk's "lister" modules it does not have its own internal search.  Instead it just gets its data from the "main context" search just like any other data-rendering module.  Think of it a SimpleResultsTable module that happens to look like a pulldown and it'll make sense. Make sure to read all documentation within the Sideview Utils app for many more key details.  This module alone has several pages of important docs that ship with the app.

[param:label]
required = False
label = gives the module a label just to the left of the pulldown. Optional. NOTE: If the label begins and ends with "$" characters, ie "$foo$", then it will be set from a corresponding variable in the URL. If that variable is absent, the label will be empty.  If "$" characters are present in any other configuration besides first character and last character the substitution will not work at all.
translate = string

[param:searchFieldsToDisplay]
required = False
label = Specifies the fields to use for the values and labels of the <option> elements.  Note that you can use $name$ to refer to the current value of the module's 'name' param.  Using values that refer to $name$ can help minimize copy-paste errors. 

[param:staticFieldsToDisplay]
required = False
label = if left blank, the module will use an IMPLICIT default of "All" as the label and "*" as the value.  By implicit I mean that the default is NOT reflected in the conf file but is wired into the code. Long story.

[param:name]
required = False
default = selection
label = If this is set to 'user', then downstream modules will be able to user $user.value$ and $user.label$ in searches and headers, and javascript can use context.get("user.element") to get the actual <option> element.  Likewise if the un-templated version of the value is required, use $user.rawValue$ (see the 'template' param).

[param:postProcess]
required = False
label = denotes any postProcess search that should be run against the current results when the module requests its data (to fill its options).  Use $postProcess$ in the value to refer to any postProcess value that may have been provided a priori from upstream modules. Use $name$ to refer to the value entered for the 'name' param. Very commonly this param will have a value of "$postProcess$ | dedup $name$ | sort $name$"

[param:requiredFields]
required = False
label = if there are fields needed in the search used to render the pulldown they will need to be specified here or splunk might not extract and summarize them.  If left blank there is an implicit default that amounts to the field names used for 'value' and 'label' in the searchFieldsToDisplay param.

[param:size]
required = False
default = 1
label = if set to any integer higher than 1,  the element becomes a 'multiple select' form element.  In that case the output is always array-valued. (normally with size=1 the context key sent to downstream modules is string valued).

[param:separator]
required = False
label = Only valid if the size is greater than 1.  When the module is configured to allow multiple selection, this string is used to glue together the N selected values when you are in a multiple selection config. Note that because of a bug in Splunk where leading and trailing space is trimmed from param values, you have to type "+" if you want leading or trailing spaces in the value.  Commonly this is set to "+OR+".

[param:outerTemplate]
required = False
default = $value$
label = Only valid if the size is greater than 1.  When the module is configured to allow multiple selection, and after the module has glued together all the N selected values using the 'separator' param, this template is used to append, prepend other values to the combined value.  In this case $value$ is used to refer to the conglomerate value, ie the multiple values that have been glued together by the separator param. Commonly this is set to "( $value$ )". See comments under the 'separator' param about leading/trailing whitespace and the use of the "+" character.

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.forEachModuleWithCustomBehavior(behaviorName, callback); See the general comments about what this all means in the CustomBehavior module.

[param:float]
required = False
label = this allows you to put float behavior on the module.

[param:clear]
required = False
label = this allows you to clear floating behavior that modules above might have been given.


[param:template]
required = False
label = this allows you to wrap the values in other text.  EG: given a name param of 'user', <param name="template">$name$="$value$"</param> will turn the module's effective output into user="bob".  Any backslashes in the actual $value$ will get backslash-escaped but the rest of the template string WILL NOT.  

[param:count]
required = False
default = 5000
label = this sets a limit on the number of dynamic <option> elements that the pulldown is allowed to retrieve from search results.

[param:width]
required = False
label = this allows you to set the width of the select element, in pixels or percent or em's or whatever works for you.  If left blank the element will have no width CSS set at all, except that which might apply from external css files like application.css.
