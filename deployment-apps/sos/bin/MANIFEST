Splunk on Splunk Commands and Scripts
=====================================

S.o.S uses various commands and scripts to gather information about your Splunk
instances. Many of these scripts are platform-specific. All commands and scripts
are located in:

$SPLUNK_HOME/etc/apps/sos/bin/


Python custom search commands
-----------------------------
* btool.py - Invokes the "btool" Splunk CLI command and returns its output as
  search results.
* btoolcheck.py - Invokes the "btool check" Splunk CLI command and returns its
  output as search results.
* serverinfo.py - Determines CPU count and physical memory installed.
* getinternalhost.py - Internal command used to determine the value of "host"
  that Splunk instances are using to write events to their _internal index.
* tpstatusquery.py - Queries the TailingProcessor:FileStatus endpoint and
  returns its output as search results in a streaming fashion. Powers the Data
  Inputs > File Monitor view.
* entity.py - Queries endpoints of the Splunk REST API and returns objects as
  search results. Soon to be removed and replaced by the native "rest" command.


Function libraries
------------------
* common.sh - A common function library for shell scripted inputs.
* common.py - A common function library for Python custom search commands.


Linux/UNIX scripted inputs
--------------------------
* ps_sos.sh - Gathers CPU and memory usage of Splunk processes on Linux and Unix
  systems.
* ps_sos_solaris.sh - A version of ps_sos.sh specific to Solaris.
* lsof_sos.sh - Gathers file descriptor usage for the main splunkd and Splunk
  Web processes on Linux and Unix.
* nfs-iostat_sos.py - Gathers usage and performance of the NFS shared storage
  device configured on search-head pools.


Windows scripted inputs
-----------------------
* sospowershell.cmd - A wrapper for the ps_sos.ps1 scripted input.
* powershell/ps_sos.ps1 - A powershell script used to gather CPU and memory
  usage of Splunk processes on Windows.


Standalone scripts
------------------
Standalone scripts for manual troubleshooting.

* get_splunkd_pstacks.sh - This script, once configured, can be used to gather
  pstacks from the main splunkd process.
* dispatch_inspector.py - This script can be used to analyze the contents of
  the search dispatch directory.
* EOF_sniffer.py - This script can be used to track the growth of a file as well
  as the contents it presents to Splunk at the end of file (EOF) position. It is
  often useful to troubleshoot issues where the contents of a file monitored by
  Splunk are partially or entirely re-read.
