# Copyright (C) 2010-2011 Sideview LLC.  All Rights Reserved.
[module]
className = Splunk.Module.Redirector

superClass = Splunk.Module

description = This module offers a simpler mechanism for taking the user's input on a given page and redirecting them to another URL that includes elements of that input in the URL itself or in parameters passed to that URL. Make sure to read all documentation within the Sideview Utils app for many more key details.  

[param:url]
required = False
label = the URL to which the user should be redirected when data hits this module.  NOTE: this will commonly be a simple relative URL, as simple as "<viewName>".  The value can contain $foo$ tokens and then if there is an upstream UI element setting a key called 'foo', the value will be substituted.  Otherwise the $foo$ will be replaced with an emptrystring.  For more complex cases the ValueSetter can often wire up simple conditional use cases, and if that's not enough you can just use a customBehavior and define what you want from application.js

[param:popup]
required = False
default = False
label = whether or not the given URL should be displayed in a popup window (True), or in the current window (False)
values = True, False

[param:arg.*]
required = False
label = You can set any number of querystring arguments by setting params of "arg.foo", "arg.bar"  Etc. If there are any $foo$ tokens in these values they will be replaced with values from the upstream context.  You can combine multiple $foo$ tokens in a single arg, and the name of the arg itself can be dynamic.  Note that the 'arg.' portion does not get reflected anywhere in the URL.

[param:fillExplicitAllTimeArgs]
required = False
default = True
label = It is not advised to set this to False.  Instead leave it unset and dont think about it.  Dont even look at it.  However somday, in some strange cases where you are using an older Splunk instance, *and* you need to use Redirector to send the user to a view and that view doesn't use Sideview Utils, you might need this.   This param will come in handy in this corner cases.  What setting this to False does is it tells Redirector NOT to substitute earliest=all and/or latest=all when it sees 'all time' timeranges. 

[param:customBehavior]
required = False
label = You can define custom behaviors by using Sideview.utils.forEachModuleWithCustomBehavior(behaviorName, callback); See the general comments about what this all means in the CustomBehavior module.